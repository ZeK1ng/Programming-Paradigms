(define (get-last ls)
	(if (= (length ls) 1) (car ls)
		(get-last (cdr ls))
	)
)
(define (remove ls elem) 
  (cond ((null? ls) '()) 
        ((equal? (car ls) elem) (remove (cdr ls) elem)) 
        (else (cons (car ls) (remove (cdr ls) elem)))))
		
(define (helper newlist seq)
	(if (null? seq) newlist
		(if (null? newlist) (helper (append newlist (list(car seq))) (cdr seq))
			(if (list? (get-last newlist)) 
				(if (equal? (car (get-last newlist)) (car seq)) 
						(helper (append (remove newlist (get-last newlist))
 								(list(cons (car (get-last newlist )) (list(+(get-last(get-last newlist )) 1))  )))
								 (cdr seq))
						(helper (append newlist (list(car seq))) (cdr seq))
				)
			(if (equal? ( get-last newlist) (car seq))
				(helper (append (remove newlist (get-last newlist))(list (cons (get-last newlist) (list 2)))) (cdr seq))
				(helper (append newlist (list(car seq))) (cdr seq))
			)
		)
	)	
)
)




(define (rle seq)
	(helper `() seq) 
)
(display (rle '(b b c a b b b a c a)))
(display (equal?(rle '(b b c a b b b a c a)) '((b 2) c a (b 3) a c a)))
(newline)
(display (equal?(rle '(a b b c d d d)) '(a (b 2) c (d 3))))
(newline)
(display (equal? (rle '(1 2 3 4)) '(1 2 3 4)))
(newline)
(display (equal? (rle '(0 0 0 0 0)) '((0 5))))
(newline)
(display (equal? (rle '()) '()))
(newline)
(display (equal? (rle '(a a a b 1 2 2)) '((a 3) b 1 (2 2))))
(newline)
